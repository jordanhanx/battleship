/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.xh123.battleship;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;

import static org.junit.jupiter.api.Assertions.*;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.StringReader;

class AppTest {

    @Test
    public void test_ifPlayAgainstComputer() throws IOException {
        BufferedReader input = new BufferedReader(new StringReader("??\nY\nn"));
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream output = new PrintStream(bytes, true);

        StringBuilder expect = new StringBuilder("");
        expect.append("Is player Test a computer player? (y/N)\n");
        expect.append("Invalid choice!\n");
        expect.append("Is player Test a computer player? (y/N)\n");
        expect.append("Is player Test a computer player? (y/N)\n");
        assertTrue(App.isComputerPlayer("Test", input, output));
        assertFalse(App.isComputerPlayer("Test", input, output));
        assertEquals(expect.toString(), bytes.toString());
    }

    // @Disabled
    @Test
    @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE) // Ensure proper serialization of
                                                                                      // the tests in parallel.
    public void test_main() throws IOException {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(bytes, true);

        String[] inputTxts = { "input_p1_p2.txt", "input_p1_c.txt", "input_c_p2.txt", "input_c_c.txt" };
        String[] outputTxts = { "output_p1_p2.txt", "output_p1_c.txt", "output_c_p2.txt", "output_c_c.txt" };

        for (int i = 0; i < inputTxts.length; ++i) {

            InputStream input = getClass().getClassLoader().getResourceAsStream(inputTxts[i]);
            assertNotNull(input);

            InputStream expectedStream = getClass().getClassLoader().getResourceAsStream(outputTxts[i]);
            assertNotNull(expectedStream);

            InputStream oldIn = System.in;
            PrintStream oldOut = System.out;
            try {
                System.setIn(input);
                System.setOut(out);
                App.main(new String[0]);
            } finally {
                System.setIn(oldIn);
                System.setOut(oldOut);
            }

            String expected = new String(expectedStream.readAllBytes());
            String actual = bytes.toString();
            assertEquals(expected, actual);

            bytes.reset();
        }
    }
}
